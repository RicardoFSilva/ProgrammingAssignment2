install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5 +7
x
y <- x -3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c81, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
p1:10
pi:10
15:1
`:`
?`:
`
?‘:‘
?':'
seq(1, 20)
seq(1, 10, 0.5)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
library(swirl)
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length()
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
my_vector
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?
matrix
my_matrix2(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
my_matrix2
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data, cnames)
?colnames
colnames(my_data) <- cnames
my_data
add2 <- function(x, y){
x + y
}
add2(3, 5)
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1: 20
above(x, 12)
above <- function(x, n = 10){
use <- x > n
x[use]
}
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
search()
x <- matrix(1:4, 2, 2)
x
y <- matrix(rep(10, 4), 2, 2)
y
x *y
x /y
x %*% y
Sys.time()
p <- as.POSIXlt(x)
x
x <- Sys.time()
p <- as.POSIXlt(x)
unclass(x)
x$sec
p <- as.POSIXlt(x)
p$sec
?strptime
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10 if(x > 5) {x <- 0}
x
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
g
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- list(a = 1:5, b = rnorm(10))
x
class(x)
lapply(x, mean)
$a
x$a
x$b
lapply(x, mean)
x
x <- list(a = 1:4, b = rnorm(10), c =(20, 1), d = rnorm(100, 5)
x <- list(a = 1:4, b = rnorm(10), c =(20, 1), d = rnorm(100, 5))
x <- list(a = 1:4, b = rnorm(10), c =(20, 1), d = rnorm(100, 5))
x <- list(a = 1:4, b = rnorm(10), c =(20, 1), d = rnorm(100, 5))
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
x
lapply(x, mean)
x <- 1:4
x
lapply(x, runif)
x
lapply(x,  ruinf, min = 0, max = 10)
lapply(x,  runif, min = 0, max = 10)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[, 1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
x
lapply(x, mean)
sapply(x, mean)
mean(x)
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 1, sum)
x
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 1, sum)
apply(x, 2, sum)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10). c(2, 2, 10))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
tapply(x, f, mean)
?gl
tapply(x, f, mean, simplify = FALSE)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
split(x, f)
f <- gl(3, 10)
split(x, f)
f
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x), c("Ozone", "Solar.R", "Wind"))
sapply(s, function(x) c("Ozone", "Solar.R", "Wind"))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")])
)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], ra.nm = TRUE)
)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], ra.nm = TRUE))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.nm = TRUE))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.nm = TRUE))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.nm = TRUE))
s
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.nm = TRUE))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.nm = TRUE))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.nm =
TRUE))
TRUE))
?str
?invisible
?debug
mean(x)
mean(c)
traceback()
c
z
mean(z)
traceback()
lm(y - x)
traceback()
debug(lm)
lm(y - x)
x
library(datasets)
data(iris)
iris
with(iris, tapply(Sepal.Length, Species, mean))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
head(iris)
tapply(Sepal.Length, Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
setwd("O:\\Data Science\\R Programming\\Programming Assignment 2")
getwd()
dir()
dir()
dir
ls()
dir()
getwd()
setwd("C:\\Users\\Ricardo Silva\\Documents\\GitHub\\ProgrammingAssignment2")
getwd()
dir()
